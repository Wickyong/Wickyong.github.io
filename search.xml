<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git在终端中的一些常用命令</title>
    <url>/2020/03/26/2020-3-26/</url>
    <content><![CDATA[<p>Git在终端中的一些常用命令</p>
<p>公司以自有服务器搭建gitLab用于代码托管, 虽说有像source tree, Tower等非常好用的可视化git管理软件,但也有很多人热衷于在终端上使用git命令,有种返璞归真的意思,今天就自己简单回顾了一些常用的git命令, 毕竟好记性不如烂笔头.</p>
<p>git mv xxx kkkk</p>
<p>#简便修改git文件的文件名</p>
<p>然后直接commit 提交</p>
<p>git log —oneline</p>
<p>#查看简便log历史</p>
<p>git log —all</p>
<p>#查看所有log所有分支 </p>
<p>git log —graph</p>
<p>#查看可视化log历史</p>
<p>git log —n4</p>
<p>#查看所有log记录的前4条</p>
<p>(commit:保存的快照,tree:相当于文件夹 ,blob:相当于文件)</p>
<p>git cat-file -p 1234567..(hash值)</p>
<p>#通过hash值查看git文件 </p>
<p>git cat-file -t 1234567..(hash值)</p>
<p>#通过hash值查看git文件格式(commit/tree/blob)</p>
<p>git diff 123456 7891011</p>
<p>#通过两个commit的hash值比较变更差异</p>
<p>git diff HEAD HEAD^1^1 (等同于git diff HEAD HEAD^^  或git diff HEAD HEAD~2)</p>
<p>#比较当前HEAD和父HEAD的父HEAD的变更差异</p>
<p>git branch -D 123456(分支名)</p>
<p>#删除指定名字的分支</p>
<p>git commit -amend </p>
<p>#对最近的一次commit的message做修改变更</p>
<p>git rebase -i 1234(需要修改的commit的父commit)</p>
<p>#对历史任意一次commit做变更</p>
<p>git rebase -i  </p>
<p>#pick改为s 进行commit合并</p>
<p>git diff —cached</p>
<p>#比较暂存区和HEAD所含文件的差异</p>
<p>git reset HEAD</p>
<p>#让暂存区恢复成和HEAD的一样,命令后可跟具体</p>
<p>文件名,即可具体到指定文件</p>
<p>git checkout — 文件名</p>
<p>#让工作区的文件恢复为和暂存区一样</p>
<p>git reset —hard 123456(commit的hash值)</p>
<p>#消除最近到指定某次commit的提交</p>
<p>git rm filename</p>
<p>#删除指定文件并同步到暂存区</p>
<p>git stash</p>
<p>#提交工作区文件到暂存区</p>
<p>git stash list</p>
<p>#查看暂存区文件列表</p>
<p>git stash pop</p>
<p>#将暂存区文件恢复到工作区,且暂存区内容清除</p>
<p>git stash apply</p>
<p>##将暂存区文件恢复到工作区,且暂存区内容保留</p>
<p>.gitignore 指定不需要git管理的文件</p>
<p>git clone </p>
<p>#git仓库备份到本地</p>
<p>git push</p>
<p>#本地提交到git仓库</p>
<p>git remote -v</p>
<p>#查看本地和远程建立联系的列表</p>
<p>git merge</p>
<p>#由git智能合并</p>
<p>git push -f</p>
<p>#强制更新(不建议使用)</p>
<p>……暂时写这么多吧</p>
]]></content>
      <categories>
        <category>通用</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>关于静态分析工具 infer 的简单使用</title>
    <url>/2020/03/05/2020-3-5/</url>
    <content><![CDATA[<p>静态分析工具 infer 的简单使用</p>
<p>在iOS开发中或许会用到一款用于静态分析的工具 - infer, 对于这个工具的出处和原理,网上也有相关介绍.</p>
<p>这里,简单记录一下使用步骤:</p>
<p>1)安装:</p>
<p>​    终端输入:</p>
<p>​    brew install infer</p>
<p>​    涉及到软件更新,依赖库安装,安装时间可能较长,具体依网络状况而定.</p>
<p>2)使用:</p>
<p>​    终端进入项目目录:</p>
<p>​    $ cd &lt;项目所在目录&gt;</p>
<p>​    使用如下命令编译:</p>
<p>​    infer – xcodebuild -target 项目名 -configuration Debug -sdk iphonesimulator</p>
<p>​    接下来终端中会出现日志信息打印.</p>
<p>3)结果</p>
<p>​    在项目所在目录出现 “build”及”infer-out”目录</p>
<p>​    “infer-out”文件夹中有txt,json等相关文件,分析bugs.txt.</p>
<p>4)再次使用</p>
<p>​    由于infer有两种模式:增量与非增量模式</p>
<p>​    a)增量模式:是在第一次运行 “2)中的编译命令” 后,产生了build和infer-out文件夹,</p>
<p>​    再次执行该编译命令时,此时就是增量模式.当项目的代码没有改动时,则此时不会有编译结果, 如果项目代码有新的改动之处,此次编译就只产生新的编译结果.</p>
<p>​    b)非增量模式:当再次执行编译命令前,删除了build和infer-out两个文件夹的时候,执行命令,则会输出所有的编译信息,相当于首次编译的情形.</p>
<p>​    所以手动使用非增量模式的方法:</p>
<p>​    一: 执行编译命令前,先删除build和infer-out文件夹(如果有的话)</p>
<p>​    二: 在编译命令的最后追加”clean”, 即:</p>
<p>​    xcodebuild -target 项目名称 -configuration Debug -sdk iphonesimulator clean</p>
<p>​    对于infer静态分析的原理,感兴趣可以google一下.</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔一则</title>
    <url>/2020/02/16/2020-2-16/</url>
    <content><![CDATA[<p>​    昨晚外面还在风雨交加,今天就是个大太阳,就是温度有点低.</p>
<p>​    看今天的网络,仿佛一场自发的摄影大赛,各种抓拍的雪景,虽说疫情当前,但这场短暂的春雪还是给广大网友们带来了一丝快乐,毕竟大家都在家憋坏了……</p>
<p>​    昨晚还看到东南亚一些国家发出了”放弃疫情防治措施”的新闻,貌似那边就是百姓该吃吃该喝喝,社会正常运作的意思,想来疫情程度不同,号称新冠病杀伤力不如Sara,于是放弃抵抗?!</p>
<p>​    昨晚西甲的一场比赛,赛前为”中国加油,武汉加油”的仪式还是挺暖心的…咱武汉同胞要加油!</p>
<p>​    </p>
<p>​    </p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>开篇</title>
    <url>/2020/02/15/2020-2-15/</url>
    <content><![CDATA[<p>2020年开年的事,大家都知道了,目前仍然在经历着…</p>
<p>由于各方面政策的原因,一直宅着,那就找点事情捣鼓捣鼓吧:买了云主机,开了VPN,</p>
<p>订了网上课程…其实我只是想搭个个人博客,那么,这就是 2020年 的第一篇博文吧.</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
</search>
