{"meta":{"title":"Wickyong的博客","subtitle":"iOS是起点,不是终点","description":"一名iOS开发爱好者","author":"Wickyong","url":"https://Wickyong.github.io"},"pages":[{"title":"about","date":"2020-02-15T12:42:49.000Z","updated":"2020-02-15T12:42:49.799Z","comments":true,"path":"about/index.html","permalink":"https://wickyong.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Git在终端中的一些常用命令","slug":"2020-3-26","date":"2020-03-26T11:09:42.000Z","updated":"2020-04-16T07:21:21.193Z","comments":true,"path":"2020/03/26/2020-3-26/","link":"","permalink":"https://wickyong.github.io/2020/03/26/2020-3-26/","excerpt":"","text":"Git在终端中的一些常用命令 公司搭建了自有服务器搭建gitLab用于代码托管, 虽说有像source tree, Tower等非常好用的可视化git管理软件,但也有很多人热衷于在终端上使用git命令,有种返璞归真的意思,今天就自己简单回顾了一些常用的git命令, 毕竟好记性不如烂笔头. git mv xxx kkkk #简便修改git文件的文件名 然后直接commit 提交 git log —oneline #查看简便log历史 git log —all #查看所有log所有分支 git log —graph #查看可视化log历史 git log —n4 #查看所有log记录的前4条 (commit:保存的快照,tree:相当于文件夹 ,blob:相当于文件) git cat-file -p 1234567..(hash值) #通过hash值查看git文件 git cat-file -t 1234567..(hash值) #通过hash值查看git文件格式(commit/tree/blob) git diff 123456 7891011 #通过两个commit的hash值比较变更差异 git diff HEAD HEAD^1^1 (等同于git diff HEAD HEAD^^ 或git diff HEAD HEAD~2) #比较当前HEAD和父HEAD的父HEAD的变更差异 git branch -D 123456(分支名) #删除指定名字的分支 git commit -amend #对最近的一次commit的message做修改变更 git rebase -i 1234(需要修改的commit的父commit) #对历史任意一次commit做变更 git rebase -i #pick改为s 进行commit合并 git diff —cached #比较暂存区和HEAD所含文件的差异 git reset HEAD #让暂存区恢复成和HEAD的一样,命令后可跟具体 文件名,即可具体到指定文件 git checkout — 文件名 #让工作区的文件恢复为和暂存区一样 git reset —hard 123456(commit的hash值) #消除最近到指定某次commit的提交 git rm filename #删除指定文件并同步到暂存区 git stash #提交工作区文件到暂存区 git stash list #查看暂存区文件列表 git stash pop #将暂存区文件恢复到工作区,且暂存区内容清除 git stash apply ##将暂存区文件恢复到工作区,且暂存区内容保留 .gitignore 指定不需要git管理的文件 git clone #git仓库备份到本地 git push #本地提交到git仓库 git remote -v #查看本地和远程建立联系的列表 git merge #由git智能合并 git push -f #强制更新(不建议使用) ……暂时写这么多吧","categories":[{"name":"通用","slug":"通用","permalink":"https://wickyong.github.io/categories/%E9%80%9A%E7%94%A8/"}],"tags":[{"name":"开发工具","slug":"开发工具","permalink":"https://wickyong.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"keywords":[{"name":"通用","slug":"通用","permalink":"https://wickyong.github.io/categories/%E9%80%9A%E7%94%A8/"}]},{"title":"关于静态分析工具 infer 的简单使用","slug":"2020-3-5","date":"2020-03-05T11:16:28.000Z","updated":"2020-03-05T13:59:18.823Z","comments":true,"path":"2020/03/05/2020-3-5/","link":"","permalink":"https://wickyong.github.io/2020/03/05/2020-3-5/","excerpt":"","text":"静态分析工具 infer 的简单使用 在iOS开发中或许会用到一款用于静态分析的工具 - infer, 对于这个工具的出处和原理,网上也有相关介绍. 这里,简单记录一下使用步骤: 1)安装: ​ 终端输入: ​ brew install infer ​ 涉及到软件更新,依赖库安装,安装时间可能较长,具体依网络状况而定. 2)使用: ​ 终端进入项目目录: ​ $ cd &lt;项目所在目录&gt; ​ 使用如下命令编译: ​ infer – xcodebuild -target 项目名 -configuration Debug -sdk iphonesimulator ​ 接下来终端中会出现日志信息打印. 3)结果 ​ 在项目所在目录出现 “build”及”infer-out”目录 ​ “infer-out”文件夹中有txt,json等相关文件,分析bugs.txt. 4)再次使用 ​ 由于infer有两种模式:增量与非增量模式 ​ a)增量模式:是在第一次运行 “2)中的编译命令” 后,产生了build和infer-out文件夹, ​ 再次执行该编译命令时,此时就是增量模式.当项目的代码没有改动时,则此时不会有编译结果, 如果项目代码有新的改动之处,此次编译就只产生新的编译结果. ​ b)非增量模式:当再次执行编译命令前,删除了build和infer-out两个文件夹的时候,执行命令,则会输出所有的编译信息,相当于首次编译的情形. ​ 所以手动使用非增量模式的方法: ​ 一: 执行编译命令前,先删除build和infer-out文件夹(如果有的话) ​ 二: 在编译命令的最后追加”clean”, 即: ​ xcodebuild -target 项目名称 -configuration Debug -sdk iphonesimulator clean ​ 对于infer静态分析的原理,感兴趣可以google一下.","categories":[{"name":"iOS","slug":"iOS","permalink":"https://wickyong.github.io/categories/iOS/"}],"tags":[{"name":"开发工具","slug":"开发工具","permalink":"https://wickyong.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://wickyong.github.io/categories/iOS/"}]},{"title":"随笔一则","slug":"2020-2-16","date":"2020-02-16T05:31:31.000Z","updated":"2020-03-05T13:54:32.586Z","comments":false,"path":"2020/02/16/2020-2-16/","link":"","permalink":"https://wickyong.github.io/2020/02/16/2020-2-16/","excerpt":"","text":"​ 昨晚外面还在风雨交加,今天就是个大太阳,就是温度有点低. ​ 看今天的网络,仿佛一场自发的摄影大赛,各种抓拍的雪景,虽说疫情当前,但这场短暂的春雪还是给广大网友们带来了一丝快乐,毕竟大家都在家憋坏了…… ​ 昨晚还看到东南亚一些国家发出了”放弃疫情防治措施”的新闻,貌似那边就是百姓该吃吃该喝喝,社会正常运作的意思,想来疫情程度不同,号称新冠病杀伤力不如Sara,于是放弃抵抗?! ​ 昨晚西甲的一场比赛,赛前为”中国加油,武汉加油”的仪式还是挺暖心的…咱武汉同胞要加油! ​ ​","categories":[{"name":"生活","slug":"生活","permalink":"https://wickyong.github.io/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"日常","slug":"日常","permalink":"https://wickyong.github.io/tags/%E6%97%A5%E5%B8%B8/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"https://wickyong.github.io/categories/%E7%94%9F%E6%B4%BB/"}]},{"title":"开篇","slug":"2020-2-15","date":"2020-02-15T13:22:06.000Z","updated":"2020-02-16T05:52:06.000Z","comments":true,"path":"2020/02/15/2020-2-15/","link":"","permalink":"https://wickyong.github.io/2020/02/15/2020-2-15/","excerpt":"","text":"2020年开年的事,大家都知道了,目前仍然在经历着… 由于各方面政策的原因,一直宅着,那就找点事情捣鼓捣鼓吧:买了云主机,开了VPN, 订了网上课程…其实我只是想搭个个人博客,那么,这就是 2020年 的第一篇博文吧.","categories":[{"name":"生活","slug":"生活","permalink":"https://wickyong.github.io/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"日常","slug":"日常","permalink":"https://wickyong.github.io/tags/%E6%97%A5%E5%B8%B8/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"https://wickyong.github.io/categories/%E7%94%9F%E6%B4%BB/"}]}]}